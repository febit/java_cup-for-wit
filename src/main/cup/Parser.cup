
package java_cup.core;

import java_cup.Assoc;
import java_cup.Main;


terminal
            PACKAGE, IMPORT, SUPER, EXTENDS,
            TERMINAL, NONTERMINAL, PRECEDENCE, NONASSOC, PERCENT_PREC,
            SEMI, COMMA, COLON, COLON_COLON_EQUALS, BAR,
            LEFT, RIGHT, LBRACK, RBRACK, GT, LT,
            QUESTION;

terminal String ID, CODE, CLASSNAME;

nonterminal
            start, pkg, imports,
            varTerm, 
            prod, prodHead, 
            prodPart, rhs,
            preced;

nonterminal String  typeName, robustIdent, labid, typearglist, typearguement;


start       ::= pkg?
                imports[] ?
                varTerm[]
                preced[] ?
                prod[]
                {: return null; :}
                ;

pkg         ::= PACKAGE CLASSNAME:name
                {: Main.packageName = %name%; return null; :}
                ;

imports     ::= IMPORT CLASSNAME:name
                {: Main.imports.add(%name%); return null; :}
                ;

varTerm     ::= TERMINAL typeName:type ID[COMMA]:symbolList SEMI
                {: declearTerminals(%symbolList%, %type%); return null; :}
                |TERMINAL ID[COMMA]:symbolList SEMI
                {: declearTerminals(%symbolList%, null); return null; :}
                | NONTERMINAL typeName:type ID[COMMA]:symbolList SEMI
                {: declearNonTerminals(%symbolList%, %type%); return null; :}
                | NONTERMINAL ID[COMMA]:symbolList SEMI
                {: declearNonTerminals(%symbolList%, null); return null; :}
                ;


preced      ::= PRECEDENCE LEFT ID[COMMA]:symbolList SEMI
                {: addPrecedence(Assoc.LEFT, %symbolList%); return null; :}
                | PRECEDENCE RIGHT ID[COMMA]:symbolList SEMI
                {: addPrecedence(Assoc.RIGHT, %symbolList%); return null; :}
                | PRECEDENCE NONASSOC ID[COMMA]:symbolList SEMI
                {: addPrecedence(Assoc.NONASSOC, %symbolList%); return null; :}
                ;

prodHead    ::= ID:lhs_id {: setLeftHandler(%lhs_id%); return null; :};


prod        ::= prodHead COLON_COLON_EQUALS rhs[BAR] SEMI
                {: return null; :};


rhs         ::= prodPart[]:prodParts PERCENT_PREC ID:sym
                {: createProduction(%prodParts%, %sym%); return null; :}
                | prodPart[]:prodParts
                {: createProduction(%prodParts%, null); return null; :} 
                ;


prodPart    ::= ID:sym labid:labid?
                {: return createProductionItem(%sym%, %labid%); :} 
                | ID:sym labid:labid? QUESTION
                {: return createProductionItem(createOptionableNonTerminalIfAbsent(%sym%), %labid%); :}
                | ID:sym LBRACK ID:split? RBRACK labid:labid?
                {: return createProductionItem(createListNonTerminalIfAbsent(%sym%, %split%), %labid%); :} 
                | ID:sym LBRACK ID:split? RBRACK labid:labid? QUESTION
                {: return createProductionItem(createOptionableNonTerminalIfAbsent(createListNonTerminalIfAbsent(%sym%, %split%).name), %labid%); :}
                | CODE:code
                {: return %code%; :}
                ;

labid       ::= COLON robustIdent:labid
                {: return %labid%; :}
                ;


typearglist ::= typearguement:arg
                {: return %arg%; :}
                | typearglist:args COMMA typearguement:arg
                {: return (%args%) + (%arg%); :}
                ;

typearguement ::=
                typeName:id
                {: return %id%;  :}
                | QUESTION
                {: return " ? "; :}
                | QUESTION EXTENDS robustIdent:id
                {: return " ? extends " + (%id%); :}
                | QUESTION SUPER robustIdent:id
                {: return " ? super " + (%id%); :}
                ;

typeName    ::= robustIdent:id
                {: return %id%; :}
                | typeName:id LBRACK RBRACK
                {: return (%id%).concat("[]"); :}
                | robustIdent:id LT typearglist:args GT
                {: return (%id%) + '<' + (%args%) +'>'; :}
                ;


robustIdent ::= ID:the_id	{: return %the_id%; :}
                | TERMINAL	{: return "terminal"; :}
                | NONTERMINAL	{: return "nonterminal"; :}
                | PRECEDENCE	{: return "precedence"; :}
                | LEFT		{: return "left"; :}
                | RIGHT		{: return "right"; :}
                | NONASSOC	{: return "nonassoc"; :}
                ;

