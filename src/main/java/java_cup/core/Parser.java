
//----------------------------------------------------
// The following code was generated by CUP-WIT v1.0
//----------------------------------------------------

package java_cup.core;

import java.util.ArrayList;
import java.util.List;
import java_cup.Assoc;
import java_cup.Main;

/**
 * 
 * @version Sat Feb 28 11:51:56 CST 2015
 */
public class Parser extends AbstractParser {

    @SuppressWarnings("unchecked")
    final Object doAction(int actionId) {
        final Stack<Symbol> myStack = this.symbolStack;

        switch (actionId){
            case 9: // symbolList ::= symbolList COMMA ID 
            {
                                Symbol symbolListSymbol = myStack.peek(2);
((List<String>) symbolListSymbol.value).add((String) myStack.peek(0).value); return (List<String>) symbolListSymbol.value;
            }
            case 8: // symbolList ::= ID 
            {
                List<String> symbolList = new ArrayList(); symbolList.add((String) myStack.peek(0).value); return symbolList;
            }
            case 5: // imports ::= imports IMPORT CLASSNAME 
            {
                Main.imports.add((String) myStack.peek(0).value); return null;
            }
            case 3: // pkg ::= PACKAGE CLASSNAME 
            {
                Main.packageName = (String) myStack.peek(0).value; return null;
            }
            case 31: // prodPart ::= CODE 
            {
                addRightActionHandler((String) myStack.peek(0).value); return null;
            }
            case 30: // prodPart ::= ID 
            {
                addRightHandler((String) myStack.peek(0).value, null); return null;
            }
            case 29: // prodPart ::= ID COLON robustIdent 
            {
                addRightHandler((String) myStack.peek(2).value, (String) myStack.peek(0).value); return null;
            }
            case 26: // rhs ::= prodParts 
            {
                createProduction(); return null;
            }
            case 25: // rhs ::= prodParts PERCENT_PREC ID 
            {
                createProductionWithPrecedence((String) myStack.peek(0).value); return null;
            }
            case 12: // varTerm ::= NONTERMINAL typeName symbolList SEMI 
            {
                declearNonTerminals((List<String>) myStack.peek(1).value, (String) myStack.peek(2).value); return null;
            }
            case 13: // varTerm ::= NONTERMINAL symbolList SEMI 
            {
                declearNonTerminals((List<String>) myStack.peek(1).value, null); return null;
            }
            case 10: // varTerm ::= TERMINAL typeName symbolList SEMI 
            {
                declearTerminals((List<String>) myStack.peek(1).value, (String) myStack.peek(2).value); return null;
            }
            case 11: // varTerm ::= TERMINAL symbolList SEMI 
            {
                declearTerminals((List<String>) myStack.peek(1).value, null); return null;
            }
            case 35: // typearguement ::= QUESTION 
                return " ? ";
            case 36: // typearguement ::= QUESTION EXTENDS robustIdent 
                return " ? extends " + ((String) myStack.peek(0).value);
            case 37: // typearguement ::= QUESTION SUPER robustIdent 
                return " ? super " + ((String) myStack.peek(0).value);
            case 45: // robustIdent ::= LEFT 
                return "left";
            case 47: // robustIdent ::= NONASSOC 
                return "nonassoc";
            case 43: // robustIdent ::= NONTERMINAL 
                return "nonterminal";
            case 44: // robustIdent ::= PRECEDENCE 
                return "precedence";
            case 46: // robustIdent ::= RIGHT 
                return "right";
            case 42: // robustIdent ::= TERMINAL 
                return "terminal";
            case 33: // typearglist ::= typearglist COMMA typearguement 
                return ((String) myStack.peek(2).value) + ((String) myStack.peek(0).value);
            case 39: // typeName ::= typeName LBRACK RBRACK 
                return ((String) myStack.peek(2).value).concat("[]");
            case 40: // typeName ::= robustIdent LT typearglist GT 
                return ((String) myStack.peek(3).value) + '<' + ((String) myStack.peek(1).value) +'>';
            case 16: // preced ::= PRECEDENCE LEFT symbolList SEMI 
                return addPrecedence(Assoc.LEFT, (List<String>) myStack.peek(1).value);
            case 18: // preced ::= PRECEDENCE NONASSOC symbolList SEMI 
                return addPrecedence(Assoc.NONASSOC, (List<String>) myStack.peek(1).value);
            case 17: // preced ::= PRECEDENCE RIGHT symbolList SEMI 
                return addPrecedence(Assoc.RIGHT, (List<String>) myStack.peek(1).value);
            case 32: // typearglist ::= typearguement 
            case 34: // typearguement ::= typeName 
            case 38: // typeName ::= robustIdent 
            case 41: // robustIdent ::= ID 
                return myStack.peek(0).value;
            case 1: // start ::= pkg imports varTerms preceds prods 
            case 2: // pkg ::= 
            case 4: // imports ::= 
            case 6: // varTerms ::= varTerm 
            case 7: // varTerms ::= varTerms varTerm 
            case 14: // preceds ::= 
            case 15: // preceds ::= preceds preced 
            case 19: // prods ::= prod 
            case 20: // prods ::= prods prod 
            case 22: // prod ::= prodHead COLON_COLON_EQUALS rhsList SEMI 
            case 23: // rhsList ::= rhs 
            case 24: // rhsList ::= rhsList BAR rhs 
            case 27: // prodParts ::= 
            case 28: // prodParts ::= prodParts prodPart 
                return null;
            case 21: // prodHead ::= ID 
            {
                setLeftHandler((String) myStack.peek(0).value); return null;
            }
            case 0: // $START ::= start EOF 
            {
                this.goonParse = false;
                return myStack.peek(1).value;
            }
            default:
                throw new RuntimeException("Invalid action id.");
        }
    }
}
