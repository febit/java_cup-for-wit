
//----------------------------------------------------
// The following code was generated by CUP-WIT v1.0
//----------------------------------------------------

package java_cup.core;

import java_cup.Assoc;
import java_cup.Main;

/**
 * 
 * @version Mon Mar 02 22:11:03 CST 2015
 */
public class Parser extends AbstractParser {

    @SuppressWarnings("unchecked")
    final Object doAction(int actionId) {
        final Stack<Symbol> myStack = this.symbolStack;

        switch (actionId){
            case 0: // $START ::= start EOF 
            {
                this.goonParse = false;
return myStack.peek(1).value;
            }
            case 17: // imports ::= IMPORT CLASSNAME 
            {
Main.imports.add((String) myStack.peek(0).value); return null;
            }
            case 16: // pkg ::= PACKAGE CLASSNAME 
            {
Main.packageName = (String) myStack.peek(0).value; return null;
            }
            case 24: // preced ::= PRECEDENCE LEFT ID$$lst$COMMA SEMI 
            {
addPrecedence(Assoc.LEFT, (java.util.List<String>) myStack.peek(1).value); return null;
            }
            case 26: // preced ::= PRECEDENCE NONASSOC ID$$lst$COMMA SEMI 
            {
addPrecedence(Assoc.NONASSOC, (java.util.List<String>) myStack.peek(1).value); return null;
            }
            case 25: // preced ::= PRECEDENCE RIGHT ID$$lst$COMMA SEMI 
            {
addPrecedence(Assoc.RIGHT, (java.util.List<String>) myStack.peek(1).value); return null;
            }
            case 34: // rhs ::= prodPart$$lst$ 
            {
createProduction((java.util.List<Object>) myStack.peek(0).value, null); return null;
            }
            case 33: // rhs ::= prodPart$$lst$ PERCENT_PREC ID 
            {
createProduction((java.util.List<Object>) myStack.peek(2).value, (String) myStack.peek(0).value); return null;
            }
            case 22: // varTerm ::= NONTERMINAL typeName ID$$lst$COMMA SEMI 
            {
declearNonTerminals((java.util.List<String>) myStack.peek(1).value, (String) myStack.peek(2).value); return null;
            }
            case 23: // varTerm ::= NONTERMINAL ID$$lst$COMMA SEMI 
            {
declearNonTerminals((java.util.List<String>) myStack.peek(1).value, null); return null;
            }
            case 20: // varTerm ::= TERMINAL typeName ID$$lst$COMMA SEMI 
            {
declearTerminals((java.util.List<String>) myStack.peek(1).value, (String) myStack.peek(2).value); return null;
            }
            case 21: // varTerm ::= TERMINAL ID$$lst$COMMA SEMI 
            {
declearTerminals((java.util.List<String>) myStack.peek(1).value, null); return null;
            }
            case 4: // imports$$lst$ ::= imports$$lst$ imports 
            case 8: // varTerm$$lst$ ::= varTerm$$lst$ varTerm 
            case 10: // preced$$lst$ ::= preced$$lst$ preced 
            case 14: // prod$$lst$ ::= prod$$lst$ prod 
            case 32: // prodPart$$lst$ ::= prodPart$$lst$ prodPart 
            {
java.util.List list = (java.util.List) (myStack.peek(1).value); list.add(myStack.peek(0).value); return list;
            }
            case 19: // ID$$lst$COMMA ::= ID$$lst$COMMA COMMA ID 
            case 29: // rhs$$lst$BAR ::= rhs$$lst$BAR BAR rhs 
            {
java.util.List list = (java.util.List) (myStack.peek(2).value); list.add(myStack.peek(0).value); return list;
            }
            case 3: // imports$$lst$ ::= imports 
            case 7: // varTerm$$lst$ ::= varTerm 
            case 9: // preced$$lst$ ::= preced 
            case 13: // prod$$lst$ ::= prod 
            case 18: // ID$$lst$COMMA ::= ID 
            case 28: // rhs$$lst$BAR ::= rhs 
            case 31: // prodPart$$lst$ ::= prodPart 
            {
java.util.List list = new java.util.ArrayList(); list.add(myStack.peek(0).value); return list;
            }
            case 48: // typearguement ::= QUESTION 
return " ? ";
            case 49: // typearguement ::= QUESTION EXTENDS robustIdent 
return " ? extends " + ((String) myStack.peek(0).value);
            case 50: // typearguement ::= QUESTION SUPER robustIdent 
return " ? super " + ((String) myStack.peek(0).value);
            case 58: // robustIdent ::= LEFT 
return "left";
            case 60: // robustIdent ::= NONASSOC 
return "nonassoc";
            case 56: // robustIdent ::= NONTERMINAL 
return "nonterminal";
            case 57: // robustIdent ::= PRECEDENCE 
return "precedence";
            case 59: // robustIdent ::= RIGHT 
return "right";
            case 55: // robustIdent ::= TERMINAL 
return "terminal";
            case 46: // typearglist ::= typearglist COMMA typearguement 
return ((String) myStack.peek(2).value) + ((String) myStack.peek(0).value);
            case 52: // typeName ::= typeName LBRACK RBRACK 
return ((String) myStack.peek(2).value).concat("[]");
            case 53: // typeName ::= robustIdent LT typearglist GT 
return ((String) myStack.peek(3).value) + '<' + ((String) myStack.peek(1).value) +'>';
            case 37: // prodPart ::= ID labid$$opt 
return createProductionItem((String) myStack.peek(1).value, (String) myStack.peek(0).value);
            case 41: // prodPart ::= ID LBRACK ID$$opt RBRACK labid$$opt 
return createProductionItem(createListNonTerminalIfAbsent((String) myStack.peek(4).value, (String) myStack.peek(2).value), (String) myStack.peek(0).value);
            case 38: // prodPart ::= ID labid$$opt QUESTION 
return createProductionItem(createOptionableNonTerminalIfAbsent((String) myStack.peek(2).value), (String) myStack.peek(1).value);
            case 42: // prodPart ::= ID LBRACK ID$$opt RBRACK labid$$opt QUESTION 
return createProductionItem(createOptionableNonTerminalIfAbsent(createListNonTerminalIfAbsent((String) myStack.peek(5).value, (String) myStack.peek(3).value).name), (String) myStack.peek(1).value);
            case 2: // pkg$$opt ::= pkg 
            case 6: // imports$$lst$$$opt ::= imports$$lst$ 
            case 12: // preced$$lst$$$opt ::= preced$$lst$ 
            case 36: // labid$$opt ::= labid 
            case 40: // ID$$opt ::= ID 
            case 43: // prodPart ::= CODE 
            case 44: // labid ::= COLON robustIdent 
            case 45: // typearglist ::= typearguement 
            case 47: // typearguement ::= typeName 
            case 51: // typeName ::= robustIdent 
            case 54: // robustIdent ::= ID 
return myStack.peek(0).value;
            case 1: // pkg$$opt ::= 
            case 5: // imports$$lst$$$opt ::= 
            case 11: // preced$$lst$$$opt ::= 
            case 15: // start ::= pkg$$opt imports$$lst$$$opt varTerm$$lst$ preced$$lst$$$opt prod$$lst$ 
            case 30: // prod ::= prodHead COLON_COLON_EQUALS rhs$$lst$BAR SEMI 
            case 35: // labid$$opt ::= 
            case 39: // ID$$opt ::= 
return null;
            case 27: // prodHead ::= ID 
            {
setLeftHandler((String) myStack.peek(0).value); return null;
            }
            default:
                throw new RuntimeException("Invalid action id.");
        }
    }
}
